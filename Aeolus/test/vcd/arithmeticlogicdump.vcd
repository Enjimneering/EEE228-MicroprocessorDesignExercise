$date
	Tue Feb 18 18:37:26 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module ALUTb $end
$var wire 1 ! OVERFLOW $end
$var wire 4 " ALU_OUT [3:0] $end
$var reg 1 # CLK $end
$var reg 4 $ IN1 [3:0] $end
$var reg 4 % IN2 [3:0] $end
$var reg 8 & OPCODE [7:0] $end
$var reg 1 ' RESET $end
$scope module alu $end
$var wire 1 ( ADD $end
$var wire 1 ) AND $end
$var wire 1 * LSH $end
$var wire 1 + LSR $end
$var wire 1 , OR $end
$var wire 1 - RSH $end
$var wire 1 . SUB $end
$var wire 1 / XOR $end
$var wire 1 # clk $end
$var wire 4 0 in1 [3:0] $end
$var wire 4 1 in2 [3:0] $end
$var wire 1 ' reset $end
$var wire 4 2 xorOut [3:0] $end
$var wire 1 3 subtractorOverflowFlag $end
$var wire 4 4 subtractorOut [3:0] $end
$var wire 4 5 shiftOut [3:0] $end
$var wire 1 6 shiftFlag $end
$var wire 4 7 orOut [3:0] $end
$var wire 4 8 andOut [3:0] $end
$var wire 1 9 adderOverflowFlag $end
$var wire 4 : adderOut [3:0] $end
$var reg 4 ; out [3:0] $end
$var reg 1 ! overflow $end
$scope module adder $end
$var wire 4 < in1 [3:0] $end
$var wire 4 = in2 [3:0] $end
$var reg 4 > out [3:0] $end
$var reg 1 9 overflow $end
$upscope $end
$scope module andGate $end
$var wire 4 ? in1 [3:0] $end
$var wire 4 @ in2 [3:0] $end
$var wire 4 A out [3:0] $end
$upscope $end
$scope module orGate $end
$var wire 4 B in1 [3:0] $end
$var wire 4 C in2 [3:0] $end
$var wire 4 D out [3:0] $end
$upscope $end
$scope module sr $end
$var wire 1 # clk $end
$var wire 4 E in [3:0] $end
$var wire 1 + loadEnable $end
$var wire 2 F shiftState [1:0] $end
$var wire 4 G dataReg [3:0] $end
$var reg 1 6 flag $end
$var reg 4 H out [3:0] $end
$scope module inShift $end
$var wire 4 I D [3:0] $end
$var wire 1 # clk $end
$var wire 1 + enable $end
$var reg 4 J Q [3:0] $end
$upscope $end
$upscope $end
$scope module subtractor $end
$var wire 4 K in1 [3:0] $end
$var wire 4 L in2 [3:0] $end
$var reg 4 M out [3:0] $end
$var reg 1 3 overflow $end
$upscope $end
$scope module xorGate $end
$var wire 4 N in1 [3:0] $end
$var wire 4 O in2 [3:0] $end
$var wire 4 P out [3:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b10 P
b101 O
b111 N
b10 M
b101 L
b111 K
bx J
b111 I
bx H
bx G
b0 F
b111 E
b111 D
b101 C
b111 B
b101 A
b101 @
b111 ?
b1100 >
b101 =
b111 <
bx ;
b1100 :
09
b101 8
b111 7
x6
bx 5
b10 4
03
b10 2
b101 1
b111 0
0/
0.
0-
0,
0+
0*
0)
0(
x'
b0 &
b101 %
b111 $
1#
bx "
x!
$end
#5
0#
#10
1#
#15
1(
0#
b1 &
#20
0!
b1100 "
b1100 ;
1#
#25
0#
#30
b10 "
b10 ;
0(
1.
1#
b10 &
#35
0#
#40
1#
#45
0#
#50
b111 G
b111 J
0.
1+
1#
b100 &
#55
0#
#60
1#
#65
0#
#70
x!
bx "
bx ;
06
b1110 5
b1110 H
0+
b10 F
1*
1#
b1000 &
#75
0#
#80
0!
b1110 "
b1110 ;
1#
#85
0#
#90
b11 5
b11 H
0*
b1 F
1-
1#
b10000 &
#95
0#
#100
b11 "
b11 ;
1#
#105
0#
#110
b101 "
b101 ;
b0 F
0-
1)
1#
b100000 &
#115
0#
#120
1#
#125
0#
#130
b111 "
b111 ;
0)
1,
1#
b1000000 &
#135
0#
#140
1#
#145
0#
#150
b10 "
b10 ;
0,
1/
1#
b10000000 &
#155
0#
#160
1#
#165
0#
